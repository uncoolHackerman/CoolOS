// isr.h 09/12/2022
// Written by Gabriel Jickells

#ifndef _ISR_H_
#define _ISR_H_

#include "idt.h"

extern void ISR_NOERR_0(void);
extern void ISR_NOERR_1(void);
extern void ISR_NOERR_2(void);
extern void ISR_NOERR_3(void);
extern void ISR_NOERR_4(void);
extern void ISR_NOERR_5(void);
extern void ISR_NOERR_6(void);
extern void ISR_NOERR_7(void);
extern void ISR_ERR_8(void);
extern void ISR_NOERR_9(void);
extern void ISR_ERR_10(void);
extern void ISR_ERR_11(void);
extern void ISR_ERR_12(void);
extern void ISR_ERR_13(void);
extern void ISR_ERR_14(void);
extern void ISR_NOERR_15(void);
extern void ISR_NOERR_16(void);
extern void ISR_ERR_17(void);
extern void ISR_NOERR_18(void);
extern void ISR_NOERR_19(void);
extern void ISR_NOERR_20(void);
extern void ISR_ERR_21(void);
extern void ISR_NOERR_22(void);
extern void ISR_NOERR_23(void);
extern void ISR_NOERR_24(void);
extern void ISR_NOERR_25(void);
extern void ISR_NOERR_26(void);
extern void ISR_NOERR_27(void);
extern void ISR_NOERR_28(void);
extern void ISR_ERR_29(void);
extern void ISR_ERR_30(void);
extern void ISR_NOERR_31(void);
extern void ISR_NOERR_32(void);
extern void ISR_NOERR_33(void);
extern void ISR_NOERR_34(void);
extern void ISR_NOERR_35(void);
extern void ISR_NOERR_36(void);
extern void ISR_NOERR_37(void);
extern void ISR_NOERR_38(void);
extern void ISR_NOERR_39(void);
extern void ISR_NOERR_40(void);
extern void ISR_NOERR_41(void);
extern void ISR_NOERR_42(void);
extern void ISR_NOERR_43(void);
extern void ISR_NOERR_44(void);
extern void ISR_NOERR_45(void);
extern void ISR_NOERR_46(void);
extern void ISR_NOERR_47(void);
extern void ISR_NOERR_48(void);
extern void ISR_NOERR_49(void);
extern void ISR_NOERR_50(void);
extern void ISR_NOERR_51(void);
extern void ISR_NOERR_52(void);
extern void ISR_NOERR_53(void);
extern void ISR_NOERR_54(void);
extern void ISR_NOERR_55(void);
extern void ISR_NOERR_56(void);
extern void ISR_NOERR_57(void);
extern void ISR_NOERR_58(void);
extern void ISR_NOERR_59(void);
extern void ISR_NOERR_60(void);
extern void ISR_NOERR_61(void);
extern void ISR_NOERR_62(void);
extern void ISR_NOERR_63(void);
extern void ISR_NOERR_64(void);
extern void ISR_NOERR_65(void);
extern void ISR_NOERR_66(void);
extern void ISR_NOERR_67(void);
extern void ISR_NOERR_68(void);
extern void ISR_NOERR_69(void);                 // nice
extern void ISR_NOERR_70(void);
extern void ISR_NOERR_71(void);
extern void ISR_NOERR_72(void);
extern void ISR_NOERR_73(void);
extern void ISR_NOERR_74(void);
extern void ISR_NOERR_75(void);
extern void ISR_NOERR_76(void);
extern void ISR_NOERR_77(void);
extern void ISR_NOERR_78(void);
extern void ISR_NOERR_79(void);
extern void ISR_NOERR_80(void);
extern void ISR_NOERR_81(void);
extern void ISR_NOERR_82(void);
extern void ISR_NOERR_83(void);
extern void ISR_NOERR_84(void);
extern void ISR_NOERR_85(void);
extern void ISR_NOERR_86(void);
extern void ISR_NOERR_87(void);
extern void ISR_NOERR_88(void);
extern void ISR_NOERR_89(void);
extern void ISR_NOERR_90(void);
extern void ISR_NOERR_91(void);
extern void ISR_NOERR_92(void);
extern void ISR_NOERR_93(void);
extern void ISR_NOERR_94(void);
extern void ISR_NOERR_95(void);
extern void ISR_NOERR_96(void);
extern void ISR_NOERR_97(void);
extern void ISR_NOERR_98(void);
extern void ISR_NOERR_99(void);
extern void ISR_NOERR_100(void);
extern void ISR_NOERR_101(void);
extern void ISR_NOERR_102(void);
extern void ISR_NOERR_103(void);
extern void ISR_NOERR_104(void);
extern void ISR_NOERR_105(void);
extern void ISR_NOERR_106(void);
extern void ISR_NOERR_107(void);
extern void ISR_NOERR_108(void);
extern void ISR_NOERR_109(void);
extern void ISR_NOERR_110(void);
extern void ISR_NOERR_111(void);
extern void ISR_NOERR_112(void);
extern void ISR_NOERR_113(void);
extern void ISR_NOERR_114(void);
extern void ISR_NOERR_115(void);
extern void ISR_NOERR_116(void);
extern void ISR_NOERR_117(void);
extern void ISR_NOERR_116(void);
extern void ISR_NOERR_117(void);
extern void ISR_NOERR_118(void);
extern void ISR_NOERR_119(void);
extern void ISR_NOERR_120(void);
extern void ISR_NOERR_121(void);
extern void ISR_NOERR_122(void);
extern void ISR_NOERR_123(void);
extern void ISR_NOERR_124(void);
extern void ISR_NOERR_125(void);
extern void ISR_NOERR_126(void);
extern void ISR_NOERR_127(void);
extern void ISR_NOERR_128(void);
extern void ISR_NOERR_129(void);
extern void ISR_NOERR_130(void);
extern void ISR_NOERR_131(void);
extern void ISR_NOERR_132(void);
extern void ISR_NOERR_133(void);
extern void ISR_NOERR_134(void);
extern void ISR_NOERR_135(void);
extern void ISR_NOERR_136(void);
extern void ISR_NOERR_137(void);
extern void ISR_NOERR_138(void);
extern void ISR_NOERR_139(void);
extern void ISR_NOERR_140(void);
extern void ISR_NOERR_141(void);
extern void ISR_NOERR_142(void);
extern void ISR_NOERR_143(void);
extern void ISR_NOERR_144(void);
extern void ISR_NOERR_145(void);
extern void ISR_NOERR_146(void);
extern void ISR_NOERR_147(void);
extern void ISR_NOERR_148(void);
extern void ISR_NOERR_149(void);
extern void ISR_NOERR_150(void);
extern void ISR_NOERR_151(void);
extern void ISR_NOERR_152(void);
extern void ISR_NOERR_153(void);
extern void ISR_NOERR_154(void);
extern void ISR_NOERR_155(void);
extern void ISR_NOERR_156(void);
extern void ISR_NOERR_157(void);
extern void ISR_NOERR_158(void);
extern void ISR_NOERR_159(void);
extern void ISR_NOERR_160(void);
extern void ISR_NOERR_161(void);
extern void ISR_NOERR_162(void);
extern void ISR_NOERR_163(void);
extern void ISR_NOERR_164(void);
extern void ISR_NOERR_165(void);
extern void ISR_NOERR_166(void);
extern void ISR_NOERR_167(void);
extern void ISR_NOERR_168(void);
extern void ISR_NOERR_169(void);
extern void ISR_NOERR_170(void);
extern void ISR_NOERR_171(void);
extern void ISR_NOERR_172(void);
extern void ISR_NOERR_173(void);
extern void ISR_NOERR_174(void);
extern void ISR_NOERR_175(void);
extern void ISR_NOERR_176(void);
extern void ISR_NOERR_177(void);
extern void ISR_NOERR_178(void);
extern void ISR_NOERR_179(void);
extern void ISR_NOERR_180(void);
extern void ISR_NOERR_181(void);
extern void ISR_NOERR_182(void);
extern void ISR_NOERR_183(void);
extern void ISR_NOERR_184(void);
extern void ISR_NOERR_185(void);
extern void ISR_NOERR_186(void);
extern void ISR_NOERR_187(void);
extern void ISR_NOERR_188(void);
extern void ISR_NOERR_189(void);
extern void ISR_NOERR_190(void);
extern void ISR_NOERR_191(void);
extern void ISR_NOERR_192(void);
extern void ISR_NOERR_193(void);
extern void ISR_NOERR_194(void);
extern void ISR_NOERR_195(void);
extern void ISR_NOERR_196(void);
extern void ISR_NOERR_197(void);
extern void ISR_NOERR_198(void);
extern void ISR_NOERR_199(void);
extern void ISR_NOERR_200(void);
extern void ISR_NOERR_201(void);
extern void ISR_NOERR_202(void);
extern void ISR_NOERR_203(void);
extern void ISR_NOERR_204(void);
extern void ISR_NOERR_205(void);
extern void ISR_NOERR_206(void);
extern void ISR_NOERR_207(void);
extern void ISR_NOERR_208(void);
extern void ISR_NOERR_209(void);
extern void ISR_NOERR_210(void);
extern void ISR_NOERR_211(void);
extern void ISR_NOERR_212(void);
extern void ISR_NOERR_213(void);
extern void ISR_NOERR_214(void);
extern void ISR_NOERR_215(void);
extern void ISR_NOERR_216(void);
extern void ISR_NOERR_217(void);
extern void ISR_NOERR_218(void);
extern void ISR_NOERR_219(void);
extern void ISR_NOERR_220(void);
extern void ISR_NOERR_221(void);
extern void ISR_NOERR_222(void);
extern void ISR_NOERR_223(void);
extern void ISR_NOERR_224(void);
extern void ISR_NOERR_225(void);
extern void ISR_NOERR_226(void);
extern void ISR_NOERR_227(void);
extern void ISR_NOERR_228(void);
extern void ISR_NOERR_229(void);
extern void ISR_NOERR_230(void);
extern void ISR_NOERR_231(void);
extern void ISR_NOERR_232(void);
extern void ISR_NOERR_233(void);
extern void ISR_NOERR_234(void);
extern void ISR_NOERR_235(void);
extern void ISR_NOERR_236(void);
extern void ISR_NOERR_237(void);
extern void ISR_NOERR_238(void);
extern void ISR_NOERR_239(void);
extern void ISR_NOERR_240(void);
extern void ISR_NOERR_241(void);
extern void ISR_NOERR_242(void);
extern void ISR_NOERR_243(void);
extern void ISR_NOERR_244(void);
extern void ISR_NOERR_245(void);
extern void ISR_NOERR_246(void);
extern void ISR_NOERR_247(void);
extern void ISR_NOERR_248(void);
extern void ISR_NOERR_249(void);
extern void ISR_NOERR_250(void);
extern void ISR_NOERR_251(void);
extern void ISR_NOERR_252(void);
extern void ISR_NOERR_253(void);
extern void ISR_NOERR_254(void);
extern void ISR_NOERR_255(void);

void SetISR(uint8_t Interrupt, void* isr, uint8_t attributes) {
    g_IDT[Interrupt].AddressLow = (uint16_t)((uint32_t)isr & 0x0000FFFF);
    g_IDT[Interrupt].AddressHigh = (uint16_t)((uint32_t)isr >> 16);
    g_IDT[Interrupt].attributes = attributes;
    g_IDT[Interrupt].SegmentSelector = 0x08;
    g_IDT[Interrupt]._reserved = 0;
    return;
}

void InitISR(void) {
    // exceptions
    SetISR(0, ISR_NOERR_0, 0b10001111);
    SetISR(1, ISR_NOERR_1, 0b10001111);
    SetISR(2, ISR_NOERR_2, 0b10001111);
    SetISR(3, ISR_NOERR_3, 0b10001111);
    SetISR(4, ISR_NOERR_4, 0b10001111);
    SetISR(5, ISR_NOERR_5, 0b10001111);
    SetISR(6, ISR_NOERR_6, 0b10001111);
    SetISR(7, ISR_NOERR_7, 0b10001111);
    SetISR(8, ISR_ERR_8, 0b10001111);
    SetISR(9, ISR_NOERR_9, 0b10001111);
    SetISR(10, ISR_ERR_10, 0b10001111);
    SetISR(11, ISR_ERR_11, 0b10001111);
    SetISR(12, ISR_ERR_12, 0b10001111);
    SetISR(13, ISR_ERR_13, 0b10001111);
    SetISR(14, ISR_ERR_14, 0b10001111);
    SetISR(15, ISR_NOERR_15, 0b10001111);
    SetISR(16, ISR_NOERR_16, 0b10001111);
    SetISR(17, ISR_ERR_17, 0b10001111);
    SetISR(18, ISR_NOERR_18, 0b10001111);
    SetISR(19, ISR_NOERR_19, 0b10001111);
    SetISR(20, ISR_NOERR_20, 0b10001111);
    SetISR(21, ISR_ERR_21, 0b10001111);
    SetISR(22, ISR_NOERR_22, 0b10001111);
    SetISR(23, ISR_NOERR_23, 0b10001111);
    SetISR(24, ISR_NOERR_24, 0b10001111);
    SetISR(25, ISR_NOERR_25, 0b10001111);
    SetISR(26, ISR_NOERR_26, 0b10001111);
    SetISR(27, ISR_NOERR_27, 0b10001111);
    SetISR(28, ISR_NOERR_28, 0b10001111);
    SetISR(29, ISR_ERR_29, 0b10001111);
    SetISR(30, ISR_ERR_30, 0b10001111);
    SetISR(31, ISR_NOERR_31, 0b10001111);
    SetISR(32, ISR_NOERR_32, 0b10001110);
    SetISR(33, ISR_NOERR_33, 0b10001110);
    SetISR(34, ISR_NOERR_34, 0b10001110);
    SetISR(35, ISR_NOERR_35, 0b10001110);
    SetISR(36, ISR_NOERR_36, 0b10001110);
    SetISR(37, ISR_NOERR_37, 0b10001110);
    SetISR(38, ISR_NOERR_38, 0b10001110);
    SetISR(39, ISR_NOERR_39, 0b10001110);
    SetISR(40, ISR_NOERR_40, 0b10001110);
    SetISR(41, ISR_NOERR_41, 0b10001110);
    SetISR(42, ISR_NOERR_42, 0b10001110);
    SetISR(43, ISR_NOERR_43, 0b10001110);
    SetISR(44, ISR_NOERR_44, 0b10001110);
    SetISR(45, ISR_NOERR_45, 0b10001110);
    SetISR(46, ISR_NOERR_46, 0b10001110);
    SetISR(47, ISR_NOERR_47, 0b10001110);
    SetISR(48, ISR_NOERR_48, 0b10001110);
    SetISR(49, ISR_NOERR_49, 0b10001110);
    SetISR(50, ISR_NOERR_50, 0b10001110);
    SetISR(51, ISR_NOERR_51, 0b10001110);
    SetISR(52, ISR_NOERR_52, 0b10001110);
    SetISR(53, ISR_NOERR_53, 0b10001110);
    SetISR(54, ISR_NOERR_54, 0b10001110);
    SetISR(55, ISR_NOERR_55, 0b10001110);
    SetISR(56, ISR_NOERR_56, 0b10001110);
    SetISR(57, ISR_NOERR_57, 0b10001110);
    SetISR(58, ISR_NOERR_58, 0b10001110);
    SetISR(59, ISR_NOERR_59, 0b10001110);
    SetISR(60, ISR_NOERR_60, 0b10001110);
    SetISR(61, ISR_NOERR_61, 0b10001110);
    SetISR(62, ISR_NOERR_62, 0b10001110);
    SetISR(63, ISR_NOERR_63, 0b10001110);
    SetISR(64, ISR_NOERR_64, 0b10001110);
    SetISR(65, ISR_NOERR_65, 0b10001110);
    SetISR(66, ISR_NOERR_66, 0b10001110);
    SetISR(67, ISR_NOERR_67, 0b10001110);
    SetISR(68, ISR_NOERR_68, 0b10001110);
    SetISR(69, ISR_NOERR_69, 0b10001110);       // nice
    SetISR(70, ISR_NOERR_70, 0b10001110);
    SetISR(71, ISR_NOERR_71, 0b10001110);
    SetISR(72, ISR_NOERR_72, 0b10001110);
    SetISR(73, ISR_NOERR_73, 0b10001110);
    SetISR(74, ISR_NOERR_74, 0b10001110);
    SetISR(75, ISR_NOERR_75, 0b10001110);
    SetISR(76, ISR_NOERR_76, 0b10001110);
    SetISR(77, ISR_NOERR_77, 0b10001110);
    SetISR(78, ISR_NOERR_78, 0b10001110);
    SetISR(79, ISR_NOERR_79, 0b10001110);
    SetISR(80, ISR_NOERR_80, 0b10001110);
    SetISR(81, ISR_NOERR_81, 0b10001110);
    SetISR(82, ISR_NOERR_82, 0b10001110);
    SetISR(83, ISR_NOERR_83, 0b10001110);
    SetISR(84, ISR_NOERR_84, 0b10001110);
    SetISR(85, ISR_NOERR_85, 0b10001110);
    SetISR(86, ISR_NOERR_86, 0b10001110);
    SetISR(87, ISR_NOERR_87, 0b10001110);
    SetISR(88, ISR_NOERR_88, 0b10001110);
    SetISR(89, ISR_NOERR_89, 0b10001110);
    SetISR(90, ISR_NOERR_90, 0b10001110);
    SetISR(91, ISR_NOERR_91, 0b10001110);
    SetISR(92, ISR_NOERR_92, 0b10001110);
    SetISR(93, ISR_NOERR_93, 0b10001110);
    SetISR(94, ISR_NOERR_94, 0b10001110);
    SetISR(95, ISR_NOERR_95, 0b10001110);
    SetISR(96, ISR_NOERR_96, 0b10001110);
    SetISR(97, ISR_NOERR_97, 0b10001110);
    SetISR(98, ISR_NOERR_98, 0b10001110);
    SetISR(99, ISR_NOERR_99, 0b10001110);
    SetISR(100, ISR_NOERR_100, 0b10001110);
    SetISR(101, ISR_NOERR_101, 0b10001110);
    SetISR(102, ISR_NOERR_102, 0b10001110);
    SetISR(103, ISR_NOERR_103, 0b10001110);
    SetISR(104, ISR_NOERR_104, 0b10001110);
    SetISR(105, ISR_NOERR_105, 0b10001110);
    SetISR(106, ISR_NOERR_106, 0b10001110);
    SetISR(107, ISR_NOERR_107, 0b10001110);
    SetISR(108, ISR_NOERR_108, 0b10001110);
    SetISR(109, ISR_NOERR_109, 0b10001110);
    SetISR(110, ISR_NOERR_110, 0b10001110);
    SetISR(111, ISR_NOERR_111, 0b10001110);
    SetISR(112, ISR_NOERR_112, 0b10001110);
    SetISR(113, ISR_NOERR_113, 0b10001110);
    SetISR(114, ISR_NOERR_114, 0b10001110);
    SetISR(115, ISR_NOERR_115, 0b10001110);
    SetISR(116, ISR_NOERR_116, 0b10001110);
    SetISR(117, ISR_NOERR_117, 0b10001110);
    SetISR(118, ISR_NOERR_118, 0b10001110);
    SetISR(119, ISR_NOERR_119, 0b10001110);
    SetISR(120, ISR_NOERR_120, 0b10001110);
    SetISR(121, ISR_NOERR_121, 0b10001110);
    SetISR(122, ISR_NOERR_122, 0b10001110);
    SetISR(123, ISR_NOERR_123, 0b10001110);
    SetISR(124, ISR_NOERR_124, 0b10001110);
    SetISR(125, ISR_NOERR_125, 0b10001110);
    SetISR(126, ISR_NOERR_126, 0b10001110);
    SetISR(127, ISR_NOERR_127, 0b10001110);
    SetISR(128, ISR_NOERR_128, 0b10001110);
    SetISR(129, ISR_NOERR_129, 0b10001110);
    SetISR(130, ISR_NOERR_130, 0b10001110);
    SetISR(131, ISR_NOERR_131, 0b10001110);
    SetISR(132, ISR_NOERR_132, 0b10001110);
    SetISR(133, ISR_NOERR_133, 0b10001110);
    SetISR(134, ISR_NOERR_134, 0b10001110);
    SetISR(135, ISR_NOERR_135, 0b10001110);
    SetISR(136, ISR_NOERR_136, 0b10001110);
    SetISR(137, ISR_NOERR_137, 0b10001110);
    SetISR(138, ISR_NOERR_138, 0b10001110);
    SetISR(139, ISR_NOERR_139, 0b10001110);
    SetISR(140, ISR_NOERR_140, 0b10001110);
    SetISR(141, ISR_NOERR_141, 0b10001110);
    SetISR(142, ISR_NOERR_142, 0b10001110);
    SetISR(143, ISR_NOERR_143, 0b10001110);
    SetISR(144, ISR_NOERR_144, 0b10001110);
    SetISR(145, ISR_NOERR_145, 0b10001110);
    SetISR(146, ISR_NOERR_146, 0b10001110);
    SetISR(147, ISR_NOERR_147, 0b10001110);
    SetISR(148, ISR_NOERR_148, 0b10001110);
    SetISR(149, ISR_NOERR_149, 0b10001110);
    SetISR(150, ISR_NOERR_150, 0b10001110);
    SetISR(151, ISR_NOERR_151, 0b10001110);
    SetISR(152, ISR_NOERR_152, 0b10001110);
    SetISR(153, ISR_NOERR_153, 0b10001110);
    SetISR(154, ISR_NOERR_154, 0b10001110);
    SetISR(155, ISR_NOERR_155, 0b10001110);
    SetISR(156, ISR_NOERR_156, 0b10001110);
    SetISR(157, ISR_NOERR_157, 0b10001110);
    SetISR(158, ISR_NOERR_158, 0b10001110);
    SetISR(159, ISR_NOERR_159, 0b10001110);
    SetISR(160, ISR_NOERR_160, 0b10001110);
    SetISR(161, ISR_NOERR_161, 0b10001110);
    SetISR(162, ISR_NOERR_162, 0b10001110);
    SetISR(163, ISR_NOERR_163, 0b10001110);
    SetISR(164, ISR_NOERR_164, 0b10001110);
    SetISR(165, ISR_NOERR_165, 0b10001110);
    SetISR(166, ISR_NOERR_166, 0b10001110);
    SetISR(167, ISR_NOERR_167, 0b10001110);
    SetISR(168, ISR_NOERR_168, 0b10001110);
    SetISR(169, ISR_NOERR_169, 0b10001110);
    SetISR(170, ISR_NOERR_170, 0b10001110);
    SetISR(171, ISR_NOERR_171, 0b10001110);
    SetISR(172, ISR_NOERR_172, 0b10001110);
    SetISR(173, ISR_NOERR_173, 0b10001110);
    SetISR(174, ISR_NOERR_174, 0b10001110);
    SetISR(175, ISR_NOERR_175, 0b10001110);
    SetISR(176, ISR_NOERR_176, 0b10001110);
    SetISR(177, ISR_NOERR_177, 0b10001110);
    SetISR(178, ISR_NOERR_178, 0b10001110);
    SetISR(179, ISR_NOERR_179, 0b10001110);
    SetISR(180, ISR_NOERR_180, 0b10001110);
    SetISR(181, ISR_NOERR_181, 0b10001110);
    SetISR(182, ISR_NOERR_182, 0b10001110);
    SetISR(183, ISR_NOERR_183, 0b10001110);
    SetISR(184, ISR_NOERR_184, 0b10001110);
    SetISR(185, ISR_NOERR_185, 0b10001110);
    SetISR(186, ISR_NOERR_186, 0b10001110);
    SetISR(187, ISR_NOERR_187, 0b10001110);
    SetISR(188, ISR_NOERR_188, 0b10001110);
    SetISR(189, ISR_NOERR_189, 0b10001110);
    SetISR(190, ISR_NOERR_190, 0b10001110);
    SetISR(191, ISR_NOERR_191, 0b10001110);
    SetISR(192, ISR_NOERR_192, 0b10001110);
    SetISR(193, ISR_NOERR_193, 0b10001110);
    SetISR(194, ISR_NOERR_194, 0b10001110);
    SetISR(195, ISR_NOERR_195, 0b10001110);
    SetISR(196, ISR_NOERR_196, 0b10001110);
    SetISR(197, ISR_NOERR_197, 0b10001110);
    SetISR(198, ISR_NOERR_198, 0b10001110);
    SetISR(199, ISR_NOERR_199, 0b10001110);
    SetISR(200, ISR_NOERR_200, 0b10001110);
    SetISR(201, ISR_NOERR_201, 0b10001110);
    SetISR(202, ISR_NOERR_202, 0b10001110);
    SetISR(203, ISR_NOERR_203, 0b10001110);
    SetISR(204, ISR_NOERR_204, 0b10001110);
    SetISR(205, ISR_NOERR_205, 0b10001110);
    SetISR(206, ISR_NOERR_206, 0b10001110);
    SetISR(207, ISR_NOERR_207, 0b10001110);
    SetISR(208, ISR_NOERR_208, 0b10001110);
    SetISR(209, ISR_NOERR_209, 0b10001110);
    SetISR(210, ISR_NOERR_210, 0b10001110);
    SetISR(211, ISR_NOERR_211, 0b10001110);
    SetISR(212, ISR_NOERR_212, 0b10001110);
    SetISR(213, ISR_NOERR_213, 0b10001110);
    SetISR(214, ISR_NOERR_214, 0b10001110);
    SetISR(215, ISR_NOERR_215, 0b10001110);
    SetISR(216, ISR_NOERR_216, 0b10001110);
    SetISR(217, ISR_NOERR_217, 0b10001110);
    SetISR(218, ISR_NOERR_218, 0b10001110);
    SetISR(219, ISR_NOERR_219, 0b10001110);
    SetISR(220, ISR_NOERR_220, 0b10001110);
    SetISR(221, ISR_NOERR_221, 0b10001110);
    SetISR(222, ISR_NOERR_222, 0b10001110);
    SetISR(223, ISR_NOERR_223, 0b10001110);
    SetISR(224, ISR_NOERR_224, 0b10001110);
    SetISR(225, ISR_NOERR_225, 0b10001110);
    SetISR(226, ISR_NOERR_226, 0b10001110);
    SetISR(227, ISR_NOERR_227, 0b10001110);
    SetISR(228, ISR_NOERR_228, 0b10001110);
    SetISR(229, ISR_NOERR_229, 0b10001110);
    SetISR(230, ISR_NOERR_230, 0b10001110);
    SetISR(231, ISR_NOERR_231, 0b10001110);
    SetISR(232, ISR_NOERR_232, 0b10001110);
    SetISR(233, ISR_NOERR_233, 0b10001110);
    SetISR(234, ISR_NOERR_234, 0b10001110);
    SetISR(235, ISR_NOERR_235, 0b10001110);
    SetISR(236, ISR_NOERR_236, 0b10001110);
    SetISR(237, ISR_NOERR_237, 0b10001110);
    SetISR(238, ISR_NOERR_238, 0b10001110);
    SetISR(239, ISR_NOERR_239, 0b10001110);
    SetISR(240, ISR_NOERR_240, 0b10001110);
    SetISR(241, ISR_NOERR_241, 0b10001110);
    SetISR(242, ISR_NOERR_242, 0b10001110);
    SetISR(243, ISR_NOERR_243, 0b10001110);
    SetISR(244, ISR_NOERR_244, 0b10001110);
    SetISR(245, ISR_NOERR_245, 0b10001110);
    SetISR(246, ISR_NOERR_246, 0b10001110);
    SetISR(247, ISR_NOERR_247, 0b10001110);
    SetISR(248, ISR_NOERR_248, 0b10001110);
    SetISR(249, ISR_NOERR_249, 0b10001110);
    SetISR(250, ISR_NOERR_250, 0b10001110);
    SetISR(251, ISR_NOERR_251, 0b10001110);
    SetISR(252, ISR_NOERR_252, 0b10001110);
    SetISR(253, ISR_NOERR_253, 0b10001110);
    SetISR(254, ISR_NOERR_254, 0b10001110);
    SetISR(255, ISR_NOERR_255, 0b10001110);
    return;
}

typedef struct Interrupt_Registers {
    uint32_t ds;                                    // pushed by the interrupt handler
    uint32_t edi, esi, ebp, ebx, edx, ecx, eax;     // pushed by the pusha in the interrupt handler
    uint32_t error, IntNum;                         // pushed by the ISR handler
    uint32_t eip, cs, eflags, esp, ss;              // pushed by the cpu
} __attribute__((packed)) Interrupt_Registers;

typedef void (*Interrupt_Handler)(Interrupt_Registers* registers);
static Interrupt_Handler g_ISR_Handlers[256];

void kernel_panic() {
    CHAR_BACKGROUND = VGA_COLOUR_BLUE;
    CHAR_FOREGROUND = VGA_COLOUR_RED;
    printf("KERNEL_PANIC\n");
    __asm("cli");
    __asm("hlt");
}

void ISR_Handler(Interrupt_Registers* registers) {
    if(g_ISR_Handlers[registers->IntNum] != NULL) g_ISR_Handlers[registers->IntNum](registers);
    else if(registers->IntNum < 32) {
        printf("The CPU encountered an unhandled exception: int $0x%x (\"%s\")\n", registers->IntNum, g_Exceptions[registers->IntNum]);
        printf("eax=0x%x, ebx=0x%x, ecx=0x%x, edx=0x%x\nesi=0x%x, edi=0x%x\nesp=0x%x, ebp=0x%x\n", registers->eax, registers->ebx, registers->ecx, registers->edx, registers->esi, registers->edi, registers->esp, registers->ebp);
    }
    else {
        printf("The CPU encountered an unknown interrupt: int $0x%x\n", registers->IntNum);
        kernel_panic();
    }
    return;
}

#endif